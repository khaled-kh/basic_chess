#ifndef MOVESET_H
#define MOVESET_H
#include "chess_definitions.h"

// bitmap of all potential moves for each piece on each square
unsigned long long MOVESET[20][64] = {
{0},// 0 EMPTY ---------------------------------------------------
{   // 1 KING ----------------------------------------------------
0b0100000011000000000000000000000000000000000000000000000000000000,
0b1010000011100000000000000000000000000000000000000000000000000000,
0b0101000001110000000000000000000000000000000000000000000000000000,
0b0010100000111000000000000000000000000000000000000000000000000000,
0b0001010000011100000000000000000000000000000000000000000000000000,
0b0000101000001110000000000000000000000000000000000000000000000000,
0b0000010100000111000000000000000000000000000000000000000000000000,
0b0000001000000011000000000000000000000000000000000000000000000000,
0b1100000001000000110000000000000000000000000000000000000000000000,
0b1110000010100000111000000000000000000000000000000000000000000000,
0b0111000001010000011100000000000000000000000000000000000000000000,
0b0011100000101000001110000000000000000000000000000000000000000000,
0b0001110000010100000111000000000000000000000000000000000000000000,
0b0000111000001010000011100000000000000000000000000000000000000000,
0b0000011100000101000001110000000000000000000000000000000000000000,
0b0000001100000010000000110000000000000000000000000000000000000000,
0b0000000011000000010000001100000000000000000000000000000000000000,
0b0000000011100000101000001110000000000000000000000000000000000000,
0b0000000001110000010100000111000000000000000000000000000000000000,
0b0000000000111000001010000011100000000000000000000000000000000000,
0b0000000000011100000101000001110000000000000000000000000000000000,
0b0000000000001110000010100000111000000000000000000000000000000000,
0b0000000000000111000001010000011100000000000000000000000000000000,
0b0000000000000011000000100000001100000000000000000000000000000000,
0b0000000000000000110000000100000011000000000000000000000000000000,
0b0000000000000000111000001010000011100000000000000000000000000000,
0b0000000000000000011100000101000001110000000000000000000000000000,
0b0000000000000000001110000010100000111000000000000000000000000000,
0b0000000000000000000111000001010000011100000000000000000000000000,
0b0000000000000000000011100000101000001110000000000000000000000000,
0b0000000000000000000001110000010100000111000000000000000000000000,
0b0000000000000000000000110000001000000011000000000000000000000000,
0b0000000000000000000000001100000001000000110000000000000000000000,
0b0000000000000000000000001110000010100000111000000000000000000000,
0b0000000000000000000000000111000001010000011100000000000000000000,
0b0000000000000000000000000011100000101000001110000000000000000000,
0b0000000000000000000000000001110000010100000111000000000000000000,
0b0000000000000000000000000000111000001010000011100000000000000000,
0b0000000000000000000000000000011100000101000001110000000000000000,
0b0000000000000000000000000000001100000010000000110000000000000000,
0b0000000000000000000000000000000011000000010000001100000000000000,
0b0000000000000000000000000000000011100000101000001110000000000000,
0b0000000000000000000000000000000001110000010100000111000000000000,
0b0000000000000000000000000000000000111000001010000011100000000000,
0b0000000000000000000000000000000000011100000101000001110000000000,
0b0000000000000000000000000000000000001110000010100000111000000000,
0b0000000000000000000000000000000000000111000001010000011100000000,
0b0000000000000000000000000000000000000011000000100000001100000000,
0b0000000000000000000000000000000000000000110000000100000011000000,
0b0000000000000000000000000000000000000000111000001010000011100000,
0b0000000000000000000000000000000000000000011100000101000001110000,
0b0000000000000000000000000000000000000000001110000010100000111000,
0b0000000000000000000000000000000000000000000111000001010000011100,
0b0000000000000000000000000000000000000000000011100000101000001110,
0b0000000000000000000000000000000000000000000001110000010100000111,
0b0000000000000000000000000000000000000000000000110000001000000011,
0b0000000000000000000000000000000000000000000000001100000001000000,
0b0000000000000000000000000000000000000000000000001110000010100000,
0b0000000000000000000000000000000000000000000000000111000001010000,
0b0000000000000000000000000000000000000000000000000011100000101000,
0b0000000000000000000000000000000000000000000000000001110000010100,
0b0000000000000000000000000000000000000000000000000000111000001010,
0b0000000000000000000000000000000000000000000000000000011100000101,
0b0000000000000000000000000000000000000000000000000000001100000010
}, // 1 KING -----------------------------------------------------
{  // 2 PAWN -----------------------------------------------------
0b0000000011000000000000000000000000000000000000000000000000000000,
0b0000000011100000000000000000000000000000000000000000000000000000,
0b0000000001110000000000000000000000000000000000000000000000000000,
0b0000000000111000000000000000000000000000000000000000000000000000,
0b0000000000011100000000000000000000000000000000000000000000000000,
0b0000000000001110000000000000000000000000000000000000000000000000,
0b0000000000000111000000000000000000000000000000000000000000000000,
0b0000000000000011000000000000000000000000000000000000000000000000,
0b1100000000000000110000000000000000000000000000000000000000000000,
0b1110000000000000111000000000000000000000000000000000000000000000,
0b0111000000000000011100000000000000000000000000000000000000000000,
0b0011100000000000001110000000000000000000000000000000000000000000,
0b0001110000000000000111000000000000000000000000000000000000000000,
0b0000111000000000000011100000000000000000000000000000000000000000,
0b0000011100000000000001110000000000000000000000000000000000000000,
0b0000001100000000000000110000000000000000000000000000000000000000,
0b0000000011000000000000001100000000000000000000000000000000000000,
0b0000000011100000000000001110000000000000000000000000000000000000,
0b0000000001110000000000000111000000000000000000000000000000000000,
0b0000000000111000000000000011100000000000000000000000000000000000,
0b0000000000011100000000000001110000000000000000000000000000000000,
0b0000000000001110000000000000111000000000000000000000000000000000,
0b0000000000000111000000000000011100000000000000000000000000000000,
0b0000000000000011000000000000001100000000000000000000000000000000,
0b0000000000000000110000000000000011000000000000000000000000000000,
0b0000000000000000111000000000000011100000000000000000000000000000,
0b0000000000000000011100000000000001110000000000000000000000000000,
0b0000000000000000001110000000000000111000000000000000000000000000,
0b0000000000000000000111000000000000011100000000000000000000000000,
0b0000000000000000000011100000000000001110000000000000000000000000,
0b0000000000000000000001110000000000000111000000000000000000000000,
0b0000000000000000000000110000000000000011000000000000000000000000,
0b0000000000000000000000001100000000000000110000000000000000000000,
0b0000000000000000000000001110000000000000111000000000000000000000,
0b0000000000000000000000000111000000000000011100000000000000000000,
0b0000000000000000000000000011100000000000001110000000000000000000,
0b0000000000000000000000000001110000000000000111000000000000000000,
0b0000000000000000000000000000111000000000000011100000000000000000,
0b0000000000000000000000000000011100000000000001110000000000000000,
0b0000000000000000000000000000001100000000000000110000000000000000,
0b0000000000000000000000000000000011000000000000001100000000000000,
0b0000000000000000000000000000000011100000000000001110000000000000,
0b0000000000000000000000000000000001110000000000000111000000000000,
0b0000000000000000000000000000000000111000000000000011100000000000,
0b0000000000000000000000000000000000011100000000000001110000000000,
0b0000000000000000000000000000000000001110000000000000111000000000,
0b0000000000000000000000000000000000000111000000000000011100000000,
0b0000000000000000000000000000000000000011000000000000001100000000,
0b0000000000000000000000000000000000000000110000000000000011000000,
0b0000000000000000000000000000000000000000111000000000000011100000,
0b0000000000000000000000000000000000000000011100000000000001110000,
0b0000000000000000000000000000000000000000001110000000000000111000,
0b0000000000000000000000000000000000000000000111000000000000011100,
0b0000000000000000000000000000000000000000000011100000000000001110,
0b0000000000000000000000000000000000000000000001110000000000000111,
0b0000000000000000000000000000000000000000000000110000000000000011,
0b0000000000000000000000000000000000000000000000001100000000000000,
0b0000000000000000000000000000000000000000000000001110000000000000,
0b0000000000000000000000000000000000000000000000000111000000000000,
0b0000000000000000000000000000000000000000000000000011100000000000,
0b0000000000000000000000000000000000000000000000000001110000000000,
0b0000000000000000000000000000000000000000000000000000111000000000,
0b0000000000000000000000000000000000000000000000000000011100000000,
0b0000000000000000000000000000000000000000000000000000001100000000
},  // 2 PAWN ----------------------------------------------------
{0},// 3 ---------------------------------------------------------
{0},// 4 ---------------------------------------------------------
{0},// 5 ---------------------------------------------------------
{   // 6 KNIGHT --------------------------------------------------
0b0000000000100000010000000000000000000000000000000000000000000000,
0b0000000000010000101000000000000000000000000000000000000000000000,
0b0000000010001000010100000000000000000000000000000000000000000000,
0b0000000001000100001010000000000000000000000000000000000000000000,
0b0000000000100010000101000000000000000000000000000000000000000000,
0b0000000000010001000010100000000000000000000000000000000000000000,
0b0000000000001000000001010000000000000000000000000000000000000000,
0b0000000000000100000000100000000000000000000000000000000000000000,
0b0010000000000000001000000100000000000000000000000000000000000000,
0b0001000000000000000100001010000000000000000000000000000000000000,
0b1000100000000000100010000101000000000000000000000000000000000000,
0b0100010000000000010001000010100000000000000000000000000000000000,
0b0010001000000000001000100001010000000000000000000000000000000000,
0b0001000100000000000100010000101000000000000000000000000000000000,
0b0000100000000000000010000000010100000000000000000000000000000000,
0b0000010000000000000001000000001000000000000000000000000000000000,
0b0100000000100000000000000010000001000000000000000000000000000000,
0b1010000000010000000000000001000010100000000000000000000000000000,
0b0101000010001000000000001000100001010000000000000000000000000000,
0b0010100001000100000000000100010000101000000000000000000000000000,
0b0001010000100010000000000010001000010100000000000000000000000000,
0b0000101000010001000000000001000100001010000000000000000000000000,
0b0000010100001000000000000000100000000101000000000000000000000000,
0b0000001000000100000000000000010000000010000000000000000000000000,
0b0000000001000000001000000000000000100000010000000000000000000000,
0b0000000010100000000100000000000000010000101000000000000000000000,
0b0000000001010000100010000000000010001000010100000000000000000000,
0b0000000000101000010001000000000001000100001010000000000000000000,
0b0000000000010100001000100000000000100010000101000000000000000000,
0b0000000000001010000100010000000000010001000010100000000000000000,
0b0000000000000101000010000000000000001000000001010000000000000000,
0b0000000000000010000001000000000000000100000000100000000000000000,
0b0000000000000000010000000010000000000000001000000100000000000000,
0b0000000000000000101000000001000000000000000100001010000000000000,
0b0000000000000000010100001000100000000000100010000101000000000000,
0b0000000000000000001010000100010000000000010001000010100000000000,
0b0000000000000000000101000010001000000000001000100001010000000000,
0b0000000000000000000010100001000100000000000100010000101000000000,
0b0000000000000000000001010000100000000000000010000000010100000000,
0b0000000000000000000000100000010000000000000001000000001000000000,
0b0000000000000000000000000100000000100000000000000010000001000000,
0b0000000000000000000000001010000000010000000000000001000010100000,
0b0000000000000000000000000101000010001000000000001000100001010000,
0b0000000000000000000000000010100001000100000000000100010000101000,
0b0000000000000000000000000001010000100010000000000010001000010100,
0b0000000000000000000000000000101000010001000000000001000100001010,
0b0000000000000000000000000000010100001000000000000000100000000101,
0b0000000000000000000000000000001000000100000000000000010000000010,
0b0000000000000000000000000000000001000000001000000000000000100000,
0b0000000000000000000000000000000010100000000100000000000000010000,
0b0000000000000000000000000000000001010000100010000000000010001000,
0b0000000000000000000000000000000000101000010001000000000001000100,
0b0000000000000000000000000000000000010100001000100000000000100010,
0b0000000000000000000000000000000000001010000100010000000000010001,
0b0000000000000000000000000000000000000101000010000000000000001000,
0b0000000000000000000000000000000000000010000001000000000000000100,
0b0000000000000000000000000000000000000000010000000010000000000000,
0b0000000000000000000000000000000000000000101000000001000000000000,
0b0000000000000000000000000000000000000000010100001000100000000000,
0b0000000000000000000000000000000000000000001010000100010000000000,
0b0000000000000000000000000000000000000000000101000010001000000000,
0b0000000000000000000000000000000000000000000010100001000100000000,
0b0000000000000000000000000000000000000000000001010000100000000000,
0b0000000000000000000000000000000000000000000000100000010000000000
},// 6 KNIGHT ----------------------------------------------------
{ // 7 BISHOP ----------------------------------------------------
0b0000000001000000001000000001000000001000000001000000001000000001,
0b0000000010100000000100000000100000000100000000100000000100000000,
0b0000000001010000100010000000010000000010000000010000000000000000,
0b0000000000101000010001001000001000000001000000000000000000000000,
0b0000000000010100001000100100000110000000000000000000000000000000,
0b0000000000001010000100010010000001000000100000000000000000000000,
0b0000000000000101000010000001000000100000010000001000000000000000,
0b0000000000000010000001000000100000010000001000000100000010000000,
0b0100000000000000010000000010000000010000000010000000010000000010,
0b1010000000000000101000000001000000001000000001000000001000000001,
0b0101000000000000010100001000100000000100000000100000000100000000,
0b0010100000000000001010000100010010000010000000010000000000000000,
0b0001010000000000000101000010001001000001100000000000000000000000,
0b0000101000000000000010100001000100100000010000001000000000000000,
0b0000010100000000000001010000100000010000001000000100000010000000,
0b0000001000000000000000100000010000001000000100000010000001000000,
0b0010000001000000000000000100000000100000000100000000100000000100,
0b0001000010100000000000001010000000010000000010000000010000000010,
0b1000100001010000000000000101000010001000000001000000001000000001,
0b0100010000101000000000000010100001000100100000100000000100000000,
0b0010001000010100000000000001010000100010010000011000000000000000,
0b0001000100001010000000000000101000010001001000000100000010000000,
0b0000100000000101000000000000010100001000000100000010000001000000,
0b0000010000000010000000000000001000000100000010000001000000100000,
0b0001000000100000010000000000000001000000001000000001000000001000,
0b0000100000010000101000000000000010100000000100000000100000000100,
0b0000010010001000010100000000000001010000100010000000010000000010,
0b1000001001000100001010000000000000101000010001001000001000000001,
0b0100000100100010000101000000000000010100001000100100000110000000,
0b0010000000010001000010100000000000001010000100010010000001000000,
0b0001000000001000000001010000000000000101000010000001000000100000,
0b0000100000000100000000100000000000000010000001000000100000010000,
0b0000100000010000001000000100000000000000010000000010000000010000,
0b0000010000001000000100001010000000000000101000000001000000001000,
0b0000001000000100100010000101000000000000010100001000100000000100,
0b0000000110000010010001000010100000000000001010000100010010000010,
0b1000000001000001001000100001010000000000000101000010001001000001,
0b0100000000100000000100010000101000000000000010100001000100100000,
0b0010000000010000000010000000010100000000000001010000100000010000,
0b0001000000001000000001000000001000000000000000100000010000001000,
0b0000010000001000000100000010000001000000000000000100000000100000,
0b0000001000000100000010000001000010100000000000001010000000010000,
0b0000000100000010000001001000100001010000000000000101000010001000,
0b0000000000000001100000100100010000101000000000000010100001000100,
0b0000000010000000010000010010001000010100000000000001010000100010,
0b1000000001000000001000000001000100001010000000000000101000010001,
0b0100000000100000000100000000100000000101000000000000010100001000,
0b0010000000010000000010000000010000000010000000000000001000000100,
0b0000001000000100000010000001000000100000010000000000000001000000,
0b0000000100000010000001000000100000010000101000000000000010100000,
0b0000000000000001000000100000010010001000010100000000000001010000,
0b0000000000000000000000011000001001000100001010000000000000101000,
0b0000000000000000100000000100000100100010000101000000000000010100,
0b0000000010000000010000000010000000010001000010100000000000001010,
0b1000000001000000001000000001000000001000000001010000000000000101,
0b0100000000100000000100000000100000000100000000100000000000000010,
0b0000000100000010000001000000100000010000001000000100000000000000,
0b0000000000000001000000100000010000001000000100001010000000000000,
0b0000000000000000000000010000001000000100100010000101000000000000,
0b0000000000000000000000000000000110000010010001000010100000000000,
0b0000000000000000000000001000000001000001001000100001010000000000,
0b0000000000000000100000000100000000100000000100010000101000000000,
0b0000000010000000010000000010000000010000000010000000010100000000,
0b1000000001000000001000000001000000001000000001000000001000000000
},   // 7 BISHOP -------------------------------------------------
{0}, //  8 -------------------------------------------------------
{0}, //  9 -------------------------------------------------------
{    // 10 ROOK --------------------------------------------------
0b0111111110000000100000001000000010000000100000001000000010000000,
0b1011111101000000010000000100000001000000010000000100000001000000,
0b1101111100100000001000000010000000100000001000000010000000100000,
0b1110111100010000000100000001000000010000000100000001000000010000,
0b1111011100001000000010000000100000001000000010000000100000001000,
0b1111101100000100000001000000010000000100000001000000010000000100,
0b1111110100000010000000100000001000000010000000100000001000000010,
0b1111111000000001000000010000000100000001000000010000000100000001,
0b1000000001111111100000001000000010000000100000001000000010000000,
0b0100000010111111010000000100000001000000010000000100000001000000,
0b0010000011011111001000000010000000100000001000000010000000100000,
0b0001000011101111000100000001000000010000000100000001000000010000,
0b0000100011110111000010000000100000001000000010000000100000001000,
0b0000010011111011000001000000010000000100000001000000010000000100,
0b0000001011111101000000100000001000000010000000100000001000000010,
0b0000000111111110000000010000000100000001000000010000000100000001,
0b1000000010000000011111111000000010000000100000001000000010000000,
0b0100000001000000101111110100000001000000010000000100000001000000,
0b0010000000100000110111110010000000100000001000000010000000100000,
0b0001000000010000111011110001000000010000000100000001000000010000,
0b0000100000001000111101110000100000001000000010000000100000001000,
0b0000010000000100111110110000010000000100000001000000010000000100,
0b0000001000000010111111010000001000000010000000100000001000000010,
0b0000000100000001111111100000000100000001000000010000000100000001,
0b1000000010000000100000000111111110000000100000001000000010000000,
0b0100000001000000010000001011111101000000010000000100000001000000,
0b0010000000100000001000001101111100100000001000000010000000100000,
0b0001000000010000000100001110111100010000000100000001000000010000,
0b0000100000001000000010001111011100001000000010000000100000001000,
0b0000010000000100000001001111101100000100000001000000010000000100,
0b0000001000000010000000101111110100000010000000100000001000000010,
0b0000000100000001000000011111111000000001000000010000000100000001,
0b1000000010000000100000001000000001111111100000001000000010000000,
0b0100000001000000010000000100000010111111010000000100000001000000,
0b0010000000100000001000000010000011011111001000000010000000100000,
0b0001000000010000000100000001000011101111000100000001000000010000,
0b0000100000001000000010000000100011110111000010000000100000001000,
0b0000010000000100000001000000010011111011000001000000010000000100,
0b0000001000000010000000100000001011111101000000100000001000000010,
0b0000000100000001000000010000000111111110000000010000000100000001,
0b1000000010000000100000001000000010000000011111111000000010000000,
0b0100000001000000010000000100000001000000101111110100000001000000,
0b0010000000100000001000000010000000100000110111110010000000100000,
0b0001000000010000000100000001000000010000111011110001000000010000,
0b0000100000001000000010000000100000001000111101110000100000001000,
0b0000010000000100000001000000010000000100111110110000010000000100,
0b0000001000000010000000100000001000000010111111010000001000000010,
0b0000000100000001000000010000000100000001111111100000000100000001,
0b1000000010000000100000001000000010000000100000000111111110000000,
0b0100000001000000010000000100000001000000010000001011111101000000,
0b0010000000100000001000000010000000100000001000001101111100100000,
0b0001000000010000000100000001000000010000000100001110111100010000,
0b0000100000001000000010000000100000001000000010001111011100001000,
0b0000010000000100000001000000010000000100000001001111101100000100,
0b0000001000000010000000100000001000000010000000101111110100000010,
0b0000000100000001000000010000000100000001000000011111111000000001,
0b1000000010000000100000001000000010000000100000001000000001111111,
0b0100000001000000010000000100000001000000010000000100000010111111,
0b0010000000100000001000000010000000100000001000000010000011011111,
0b0001000000010000000100000001000000010000000100000001000011101111,
0b0000100000001000000010000000100000001000000010000000100011110111,
0b0000010000000100000001000000010000000100000001000000010011111011,
0b0000001000000010000000100000001000000010000000100000001011111101,
0b0000000100000001000000010000000100000001000000010000000111111110
},   // 10 ROOK --------------------------------------------------
{0}, // 11 -------------------------------------------------------
{0}, // 12 -------------------------------------------------------
{0}, // 13 -------------------------------------------------------
{0}, // 14 -------------------------------------------------------
{0}, // 15 -------------------------------------------------------
{0}, // 16 -------------------------------------------------------
{0}, // 17 -------------------------------------------------------
{    // 18 QUEEN -------------------------------------------------
0b0111111111000000101000001001000010001000100001001000001010000001,
0b1011111111100000010100000100100001000100010000100100000101000000,
0b1101111101110000101010000010010000100010001000010010000000100000,
0b1110111100111000010101001001001000010001000100000001000000010000,
0b1111011100011100001010100100100110001000000010000000100000001000,
0b1111101100001110000101010010010001000100100001000000010000000100,
0b1111110100000111000010100001001000100010010000101000001000000010,
0b1111111000000011000001010000100100010001001000010100000110000001,
0b1100000001111111110000001010000010010000100010001000010010000010,
0b1110000010111111111000000101000001001000010001000100001001000001,
0b0111000011011111011100001010100000100100001000100010000100100000,
0b0011100011101111001110000101010010010010000100010001000000010000,
0b0001110011110111000111000010101001001001100010000000100000001000,
0b0000111011111011000011100001010100100100010001001000010000000100,
0b0000011111111101000001110000101000010010001000100100001010000010,
0b0000001111111110000000110000010100001001000100010010000101000001,
0b1010000011000000011111111100000010100000100100001000100010000100,
0b0101000011100000101111111110000001010000010010000100010001000010,
0b1010100001110000110111110111000010101000001001000010001000100001,
0b0101010000111000111011110011100001010100100100100001000100010000,
0b0010101000011100111101110001110000101010010010011000100000001000,
0b0001010100001110111110110000111000010101001001000100010010000100,
0b0000101000000111111111010000011100001010000100100010001001000010,
0b0000010100000011111111100000001100000101000010010001000100100001,
0b1001000010100000110000000111111111000000101000001001000010001000,
0b0100100001010000111000001011111111100000010100000100100001000100,
0b0010010010101000011100001101111101110000101010000010010000100010,
0b1001001001010100001110001110111100111000010101001001001000010001,
0b0100100100101010000111001111011100011100001010100100100110001000,
0b0010010000010101000011101111101100001110000101010010010001000100,
0b0001001000001010000001111111110100000111000010100001001000100010,
0b0000100100000101000000111111111000000011000001010000100100010001,
0b1000100010010000101000001100000001111111110000001010000010010000,
0b0100010001001000010100001110000010111111111000000101000001001000,
0b0010001000100100101010000111000011011111011100001010100000100100,
0b0001000110010010010101000011100011101111001110000101010010010010,
0b1000100001001001001010100001110011110111000111000010101001001001,
0b0100010000100100000101010000111011111011000011100001010100100100,
0b0010001000010010000010100000011111111101000001110000101000010010,
0b0001000100001001000001010000001111111110000000110000010100001001,
0b1000010010001000100100001010000011000000011111111100000010100000,
0b0100001001000100010010000101000011100000101111111110000001010000,
0b0010000100100010001001001010100001110000110111110111000010101000,
0b0001000000010001100100100101010000111000111011110011100001010100,
0b0000100010001000010010010010101000011100111101110001110000101010,
0b1000010001000100001001000001010100001110111110110000111000010101,
0b0100001000100010000100100000101000000111111111010000011100001010,
0b0010000100010001000010010000010100000011111111100000001100000101,
0b1000001010000100100010001001000010100000110000000111111111000000,
0b0100000101000010010001000100100001010000111000001011111111100000,
0b0010000000100001001000100010010010101000011100001101111101110000,
0b0001000000010000000100011001001001010100001110001110111100111000,
0b0000100000001000100010000100100100101010000111001111011100011100,
0b0000010010000100010001000010010000010101000011101111101100001110,
0b1000001001000010001000100001001000001010000001111111110100000111,
0b0100000100100001000100010000100100000101000000111111111000000011,
0b1000000110000010100001001000100010010000101000001100000001111111,
0b0100000001000001010000100100010001001000010100001110000010111111,
0b0010000000100000001000010010001000100100101010000111000011011111,
0b0001000000010000000100000001000110010010010101000011100011101111,
0b0000100000001000000010001000100001001001001010100001110011110111,
0b0000010000000100100001000100010000100100000101010000111011111011,
0b0000001010000010010000100010001000010010000010100000011111111101,
0b1000000101000001001000010001000100001001000001010000001111111110
},   // 18 QUEEN -------------------------------------------------
{0}  // 19 -------------------------------------------------------
};

void set1(int b[8][8], int x, int y){ if(x>=0 && y>=0 && x<8 && y<8) b[x][y]=1; }
void set0(int b[8][8], int x, int y){ if(x>=0 && y>=0 && x<8 && y<8) b[x][y]=0; }

void enumerate_moveset(int p)
{
    int b[8][8];

    for (int i = 0; i < 64; i++)
    {
        for(int j=0; j<64; j++) b[j/8][j%8] = 0;
        unsigned long long l = 0x0000000000000000;
        int x = i / 8;
        int y = i % 8;

        switch (p)
        {
            case PAWN:
            set1(b,x+1,y-1); set1(b,x+1,y+0); set1(b,x+1,y+1);
            /**************/ /*****PAWN*****/ /**************/
            set1(b,x-1,y-1); set1(b,x-1,y+0); set1(b,x-1,y+1);
            break;
            case KNIGHT:
            /**************/ set1(b,x+2,y+1); /**************/ set1(b,x+2,y-1); /**************/
            set1(b,x+1,y+2); /**************/ /**************/ /**************/ set1(b,x+1,y-2);
            /**************/ /**************/ /****KNIGHT****/ /**************/ /**************/
            set1(b,x-1,y+2); /**************/ /**************/ /**************/ set1(b,x-1,y-2);
            /**************/ set1(b,x-2,y+1); /**************/ set1(b,x-2,y-1); /**************/
            break;
            case BISHOP:
            for(int i=1; i < 8; i++) set1(b, x+i, y+i);
            for(int i=1; i < 8; i++) set1(b, x+i, y-i);
            for(int i=1; i < 8; i++) set1(b, x-i, y+i);
            for(int i=1; i < 8; i++) set1(b, x-i, y-i);
            break;
            case ROOK:
            for(int i=1; i < 8; i++) set1(b, x+i, y);
            for(int i=1; i < 8; i++) set1(b, x-i, y);
            for(int i=1; i < 8; i++) set1(b, x, y+i);
            for(int i=1; i < 8; i++) set1(b, x, y-i);
            break;
            case QUEEN:
            for(int i=1; i < 8; i++) set1(b, x+i, y);
            for(int i=1; i < 8; i++) set1(b, x-i, y);
            for(int i=1; i < 8; i++) set1(b, x, y+i);
            for(int i=1; i < 8; i++) set1(b, x, y-i);
            for(int i=1; i < 8; i++) set1(b, x+i, y+i);
            for(int i=1; i < 8; i++) set1(b, x+i, y-i);
            for(int i=1; i < 8; i++) set1(b, x-i, y+i);
            for(int i=1; i < 8; i++) set1(b, x-i, y-i);
            break;
            case KING:
            set1(b,x+1,y-1); set1(b,x+1,y+0); set1(b,x+1,y+1);
            set1(b,x+0,y-1); /*****KING*****/ set1(b,x+0,y+1);
            set1(b,x-1,y-1); set1(b,x-1,y+0); set1(b,x-1,y+1);
            break;
        }

        printf("0b");
        for(int j=0; j<64; j++) printf("%d", b[j/8][j%8]);
        printf(",\n");
    }
}

void get_base_moveset(int board[8][8], Point p, int moves[8][8])
{
    int i = board[p.x][p.y];
    unsigned long long m = MOVESET[i][(8*p.x)+p.y];
    moves[0][0]=BIT(m,63- 0)?1:0; moves[0][1]=BIT(m,63- 1)?1:0; moves[0][2]=BIT(m,63- 2)?1:0; moves[0][3]=BIT(m,63- 3)?1:0;
    moves[0][4]=BIT(m,63- 4)?1:0; moves[0][5]=BIT(m,63- 5)?1:0; moves[0][6]=BIT(m,63- 6)?1:0; moves[0][7]=BIT(m,63- 7)?1:0;
    moves[1][0]=BIT(m,63- 8)?1:0; moves[1][1]=BIT(m,63- 9)?1:0; moves[1][2]=BIT(m,63-10)?1:0; moves[1][3]=BIT(m,63-11)?1:0;
    moves[1][4]=BIT(m,63-12)?1:0; moves[1][5]=BIT(m,63-13)?1:0; moves[1][6]=BIT(m,63-14)?1:0; moves[1][7]=BIT(m,63-15)?1:0;
    moves[2][0]=BIT(m,63-16)?1:0; moves[2][1]=BIT(m,63-17)?1:0; moves[2][2]=BIT(m,63-18)?1:0; moves[2][3]=BIT(m,63-19)?1:0;
    moves[2][4]=BIT(m,63-20)?1:0; moves[2][5]=BIT(m,63-21)?1:0; moves[2][6]=BIT(m,63-22)?1:0; moves[2][7]=BIT(m,63-23)?1:0;
    moves[3][0]=BIT(m,63-24)?1:0; moves[3][1]=BIT(m,63-25)?1:0; moves[3][2]=BIT(m,63-26)?1:0; moves[3][3]=BIT(m,63-27)?1:0;
    moves[3][4]=BIT(m,63-28)?1:0; moves[3][5]=BIT(m,63-29)?1:0; moves[3][6]=BIT(m,63-30)?1:0; moves[3][7]=BIT(m,63-31)?1:0;
    moves[4][0]=BIT(m,63-32)?1:0; moves[4][1]=BIT(m,63-33)?1:0; moves[4][2]=BIT(m,63-34)?1:0; moves[4][3]=BIT(m,63-35)?1:0;
    moves[4][4]=BIT(m,63-36)?1:0; moves[4][5]=BIT(m,63-37)?1:0; moves[4][6]=BIT(m,63-38)?1:0; moves[4][7]=BIT(m,63-39)?1:0;
    moves[5][0]=BIT(m,63-40)?1:0; moves[5][1]=BIT(m,63-41)?1:0; moves[5][2]=BIT(m,63-42)?1:0; moves[5][3]=BIT(m,63-43)?1:0;
    moves[5][4]=BIT(m,63-44)?1:0; moves[5][5]=BIT(m,63-45)?1:0; moves[5][6]=BIT(m,63-46)?1:0; moves[5][7]=BIT(m,63-47)?1:0;
    moves[6][0]=BIT(m,63-48)?1:0; moves[6][1]=BIT(m,63-49)?1:0; moves[6][2]=BIT(m,63-50)?1:0; moves[6][3]=BIT(m,63-51)?1:0;
    moves[6][4]=BIT(m,63-52)?1:0; moves[6][5]=BIT(m,63-53)?1:0; moves[6][6]=BIT(m,63-54)?1:0; moves[6][7]=BIT(m,63-55)?1:0;
    moves[7][0]=BIT(m,63-56)?1:0; moves[7][1]=BIT(m,63-57)?1:0; moves[7][2]=BIT(m,63-58)?1:0; moves[7][3]=BIT(m,63-59)?1:0;
    moves[7][4]=BIT(m,63-60)?1:0; moves[7][5]=BIT(m,63-61)?1:0; moves[7][6]=BIT(m,63-62)?1:0; moves[7][7]=BIT(m,63-63)?1:0;
}

void get_legal_moves(int board[8][8], Point p, int moves[8][8])
{
    const int a = board[p.x][p.y];

    switch (a)
    {
    case PAWN:
        if (p.x>0 && p.x<7 && !board[p.x+(a/a)][p.y]) moves[p.x+(a/a)][p.y]=1;
        if (p.x>0 && p.x<7 && p.y>0 && board[p.x+(a>0?1:-1)][p.y-1]
            && (a^board[p.x+(a>0?1:-1)][p.y-1])<0) moves[p.x+(a>0?1:-1)][p.y-1]=1;
        if (p.x>0 && p.x<7 && p.y<7 && board[p.x+(a>0?1:-1)][p.y+1]
            && (a^board[p.x+(a>0?1:-1)][p.y+1])<0) moves[p.x+(a>0?1:-1)][p.y+1]=1;
        break;
    case KING:
        if(p.x<7 && (!board[p.x+1][p.y] || (a^board[p.x+1][p.y])<0)) moves[p.x+1][p.y]=1;
        if(p.x>0 && (!board[p.x-1][p.y] || (a^board[p.x-1][p.y])<0)) moves[p.x-1][p.y]=1;
        if(p.y<7 && (!board[p.x][p.y+1] || (a^board[p.x][p.y+1])<0)) moves[p.x][p.y+1]=1;
        if(p.y>0 && (!board[p.x][p.y-1] || (a^board[p.x][p.y-1])<0)) moves[p.x][p.y-1]=1;
        if(p.x<7 && p.y<7 && (!board[p.x+1][p.y+1] || (a^board[p.x+1][p.y+1])<0)) moves[p.x+1][p.y+1]=1;
        if(p.x<7 && p.y>0 && (!board[p.x+1][p.y-1] || (a^board[p.x+1][p.y-1])<0)) moves[p.x+1][p.y-1]=1;
        if(p.x>0 && p.y<7 && (!board[p.x-1][p.y+1] || (a^board[p.x-1][p.y+1])<0)) moves[p.x-1][p.y+1]=1;
        if(p.x>0 && p.y>0 && (!board[p.x-1][p.y-1] || (a^board[p.x-1][p.y-1])<0)) moves[p.x-1][p.y-1]=1;
        break;
    case KNIGHT:
        if(p.x<6 && p.y<7 && (!board[p.x+2][p.y+1] || (a^board[p.x+2][p.y+1])<0)) moves[p.x+2][p.y+1]=1;
        if(p.x<7 && p.y<6 && (!board[p.x+1][p.y+2] || (a^board[p.x+1][p.y+2])<0)) moves[p.x+1][p.y+2]=1;
        if(p.x<6 && p.y>0 && (!board[p.x+2][p.y-1] || (a^board[p.x+2][p.y-1])<0)) moves[p.x+2][p.y-1]=1;
        if(p.x<7 && p.y>1 && (!board[p.x+1][p.y-2] || (a^board[p.x+1][p.y-2])<0)) moves[p.x+1][p.y-2]=1;
        if(p.x>1 && p.y<7 && (!board[p.x-2][p.y+1] || (a^board[p.x-2][p.y+1])<0)) moves[p.x-2][p.y+1]=1;
        if(p.x>0 && p.y<6 && (!board[p.x-1][p.y+2] || (a^board[p.x-1][p.y+2])<0)) moves[p.x-1][p.y+2]=1;
        if(p.x>1 && p.y>0 && (!board[p.x-2][p.y-1] || (a^board[p.x-2][p.y-1])<0)) moves[p.x-2][p.y-1]=1;
        if(p.x>0 && p.y>1 && (!board[p.x-1][p.y-2] || (a^board[p.x-1][p.y-2])<0)) moves[p.x-1][p.y-2]=1;
        break;
    case QUEEN:
    case ROOK:
        for(int i=1,f=0; p.x+i<=7;i++) if(f || (board[p.x+i][p.y] && (a^board[p.x+i][p.y])>=0)) break; else if((!board[p.x+i][p.y]) || (f=(a^board[p.x+i][p.y])<0)) set1(moves,p.x+i,p.y);
        for(int i=1,f=0; p.x-i>=0;i++) if(f || (board[p.x-i][p.y] && (a^board[p.x-i][p.y])>=0)) break; else if((!board[p.x-i][p.y]) || (f=(a^board[p.x-i][p.y])<0)) set1(moves,p.x-i,p.y);
        for(int i=1,f=0; p.y+i<=7;i++) if(f || (board[p.x][p.y+i] && (a^board[p.x][p.y+i])>=0)) break; else if((!board[p.x][p.y+i]) || (f=(a^board[p.x][p.y+i])<0)) set1(moves,p.x,p.y+i);
        for(int i=1,f=0; p.y-i>=0;i++) if(f || (board[p.x][p.y-i] && (a^board[p.x][p.y-i])>=0)) break; else if((!board[p.x][p.y-i]) || (f=(a^board[p.x][p.y-i])<0)) set1(moves,p.x,p.y-i);
        if(a == ROOK) break;
    case BISHOP:
        for(int i=1,f=0; p.x+i<=7 && p.y+i<=7;i++) if(f || (board[p.x+i][p.y+i] && (a^board[p.x+i][p.y+i])>=0)) break; else if((!board[p.x+i][p.y+i]) || (f=(a^board[p.x+i][p.y+i])<0)) set1(moves,p.x+i,p.y+i);
        for(int i=1,f=0; p.x+i<=7 && p.y-i>=0;i++) if(f || (board[p.x+i][p.y-i] && (a^board[p.x+i][p.y-i])>=0)) break; else if((!board[p.x+i][p.y-i]) || (f=(a^board[p.x+i][p.y-i])<0)) set1(moves,p.x+i,p.y-i);
        for(int i=1,f=0; p.x-i>=0 && p.y+i<=7;i++) if(f || (board[p.x-i][p.y+i] && (a^board[p.x-i][p.y+i])>=0)) break; else if((!board[p.x-i][p.y+i]) || (f=(a^board[p.x-i][p.y+i])<0)) set1(moves,p.x-i,p.y+i);
        for(int i=1,f=0; p.x-i>=0 && p.y-i>=0;i++) if(f || (board[p.x-i][p.y-i] && (a^board[p.x-i][p.y-i])>=0)) break; else if((!board[p.x-i][p.y-i]) || (f=(a^board[p.x-i][p.y-i])<0)) set1(moves,p.x-i,p.y-i);
        break;
    case EMPTY:
    default: break;
    }
}

int valid_move(int board[8][8], int moves[8][8], Point from, Point to)
{
    get_legal_moves(board,from,moves);
    return moves[to.x][to.y];
}

int whox(int board[8][8], int x, int y)
{
    return (x>=0 && x<8 && y>=0 && y<8) ? board[x][y] : 0;
}

// return 1 if white in check, -1 if black in check, 0 otherwise
int is_check(int board[8][8])
{
    // find the king position
    for(int i=0; i<8; i++)
    for(int j=0; j<8; j++)
    switch(board[i][j])
    {
        case KING:
        if (i<7 && j<7 && board[i+1][j+1]==-PAWN  ) return 1;
        if (i<7 && j>0 && board[i+1][j-1]==-PAWN  ) return 1;
        if (i<7 && j<6 && board[i+1][j+2]==-KNIGHT) return 1;
        if (i<6 && j<7 && board[i+2][j+1]==-KNIGHT) return 1;
        if (i<7 && j>1 && board[i+1][j-2]==-KNIGHT) return 1;
        if (i<6 && j>0 && board[i+2][j-1]==-KNIGHT) return 1;
        if (i>0 && j<6 && board[i-1][j+2]==-KNIGHT) return 1;
        if (i>1 && j<7 && board[i-2][j+1]==-KNIGHT) return 1;
        if (i>0 && j>1 && board[i-1][j-2]==-KNIGHT) return 1;
        if (i>1 && j>0 && board[i-2][j-1]==-KNIGHT) return 1;
        for(int k=1;k<8;k++) if(whox(board,i+k,j  )>0) break; else if(whox(board,i+k,j  )==-ROOK  ) return 1;
        for(int k=1;k<8;k++) if(whox(board,i,j+k  )>0) break; else if(whox(board,i,j+k  )==-ROOK  ) return 1;
        for(int k=1;k<8;k++) if(whox(board,i-k,j  )>0) break; else if(whox(board,i-k,j  )==-ROOK  ) return 1;
        for(int k=1;k<8;k++) if(whox(board,i,j-k  )>0) break; else if(whox(board,i,j-k  )==-ROOK  ) return 1;
        for(int k=1;k<8;k++) if(whox(board,i+k,j  )>0) break; else if(whox(board,i+k,j  )==-QUEEN ) return 1;
        for(int k=1;k<8;k++) if(whox(board,i,j+k  )>0) break; else if(whox(board,i,j+k  )==-QUEEN ) return 1;
        for(int k=1;k<8;k++) if(whox(board,i-k,j  )>0) break; else if(whox(board,i-k,j  )==-QUEEN ) return 1;
        for(int k=1;k<8;k++) if(whox(board,i,j-k  )>0) break; else if(whox(board,i,j-k  )==-QUEEN ) return 1;
        for(int k=1;k<8;k++) if(whox(board,i+k,j+k)>0) break; else if(whox(board,i+k,j+k)==-BISHOP) return 1;
        for(int k=1;k<8;k++) if(whox(board,i+k,j-k)>0) break; else if(whox(board,i+k,j-k)==-BISHOP) return 1;
        for(int k=1;k<8;k++) if(whox(board,i-k,j+k)>0) break; else if(whox(board,i-k,j+k)==-BISHOP) return 1;
        for(int k=1;k<8;k++) if(whox(board,i-k,j-k)>0) break; else if(whox(board,i-k,j-k)==-BISHOP) return 1;
        for(int k=1;k<8;k++) if(whox(board,i+k,j+k)>0) break; else if(whox(board,i+k,j+k)==-QUEEN ) return 1;
        for(int k=1;k<8;k++) if(whox(board,i+k,j-k)>0) break; else if(whox(board,i+k,j-k)==-QUEEN ) return 1;
        for(int k=1;k<8;k++) if(whox(board,i-k,j+k)>0) break; else if(whox(board,i-k,j+k)==-QUEEN ) return 1;
        for(int k=1;k<8;k++) if(whox(board,i-k,j-k)>0) break; else if(whox(board,i-k,j-k)==-QUEEN ) return 1;
        break;
        case-KING:
        if (i>0 && j<7 && board[i-1][j+1]== PAWN  ) return-1;
        if (i>0 && j>0 && board[i-1][j-1]== PAWN  ) return-1;
        if (i<7 && j<6 && board[i+1][j+2]== KNIGHT) return-1;
        if (i<6 && j<7 && board[i+2][j+1]== KNIGHT) return-1;
        if (i<7 && j>1 && board[i+1][j-2]== KNIGHT) return-1;
        if (i<6 && j>0 && board[i+2][j-1]== KNIGHT) return-1;
        if (i>0 && j<6 && board[i-1][j+2]== KNIGHT) return-1;
        if (i>1 && j<7 && board[i-2][j+1]== KNIGHT) return-1;
        if (i>0 && j>1 && board[i-1][j-2]== KNIGHT) return-1;
        if (i>1 && j>0 && board[i-2][j-1]== KNIGHT) return-1;
        for(int k=1;k<8;k++) if(whox(board,i+k,j  )<0) break; else if(whox(board,i+k,j  )== ROOK  ) return-1;
        for(int k=1;k<8;k++) if(whox(board,i,j+k  )<0) break; else if(whox(board,i,j+k  )== ROOK  ) return-1;
        for(int k=1;k<8;k++) if(whox(board,i-k,j  )<0) break; else if(whox(board,i-k,j  )== ROOK  ) return-1;
        for(int k=1;k<8;k++) if(whox(board,i,j-k  )<0) break; else if(whox(board,i,j-k  )== ROOK  ) return-1;
        for(int k=1;k<8;k++) if(whox(board,i+k,j  )<0) break; else if(whox(board,i+k,j  )== QUEEN ) return-1;
        for(int k=1;k<8;k++) if(whox(board,i,j+k  )<0) break; else if(whox(board,i,j+k  )== QUEEN ) return-1;
        for(int k=1;k<8;k++) if(whox(board,i-k,j  )<0) break; else if(whox(board,i-k,j  )== QUEEN ) return-1;
        for(int k=1;k<8;k++) if(whox(board,i,j-k  )<0) break; else if(whox(board,i,j-k  )== QUEEN ) return-1;
        for(int k=1;k<8;k++) if(whox(board,i+k,j+k)<0) break; else if(whox(board,i+k,j+k)== BISHOP) return-1;
        for(int k=1;k<8;k++) if(whox(board,i+k,j-k)<0) break; else if(whox(board,i+k,j-k)== BISHOP) return-1;
        for(int k=1;k<8;k++) if(whox(board,i-k,j+k)<0) break; else if(whox(board,i-k,j+k)== BISHOP) return-1;
        for(int k=1;k<8;k++) if(whox(board,i-k,j-k)<0) break; else if(whox(board,i-k,j-k)== BISHOP) return-1;
        for(int k=1;k<8;k++) if(whox(board,i+k,j+k)<0) break; else if(whox(board,i+k,j+k)== QUEEN ) return-1;
        for(int k=1;k<8;k++) if(whox(board,i+k,j-k)<0) break; else if(whox(board,i+k,j-k)== QUEEN ) return-1;
        for(int k=1;k<8;k++) if(whox(board,i-k,j+k)<0) break; else if(whox(board,i-k,j+k)== QUEEN ) return-1;
        for(int k=1;k<8;k++) if(whox(board,i-k,j-k)<0) break; else if(whox(board,i-k,j-k)== QUEEN ) return-1;
    }
    return 0;
}

void printBits(size_t size, void* ptr, int br)
{
    int z = 0;
    unsigned char *b = (unsigned char*) ptr;
    unsigned char byte; int i, j;
    
    for (i = size-1; i >= 0; i--) {
        for (j = 7; j >= 0; j--) {
            byte = (b[i] >> j) & 1;
            printf("%u", byte);
            if (++z==br) z=0, putchar(10);
    }} puts("");
}

void printBitsR(size_t size, void* ptr, int br)
{
    int z = 0;
    unsigned char *b = (unsigned char*) ptr;
    unsigned char byte; int i, j;
    
    for (i = 0; i < size; i++) {
        for (j = 0; j < 8; j++) {
            byte = (b[i] >> j) & 1;
            printf("%u", byte);
            if (++z==br) z=0, putchar(10);
    }} puts("");
}

#endif